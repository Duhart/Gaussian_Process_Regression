if(is.null(prior_fun)){
prior_fun <- function(p){return(mean(y))}
dprior_fun <- function(p){return(rep(0,m))}
}
if(is.null(dim(X))){
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j],...))})
}else{
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j,],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j,],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j,],...))})
}
id <- diag(n)
res <- matrix(rep(0,N * m),nrow = N)
A <- solve(matrix_k(X,X,l,sn,sf,std) + sigma^2 * id, matrix(y,ncol = 1) - matrix(prior_y,ncol = 1))
x <- matrix(x, ncol = m)
for(j in 1:N){
res[j,] <- as.numeric(matrix(dprior_x[[j]],ncol = 1) +
dmatK(x[j,],X,l,sn,sf,std) %*% A)
}
return(res)
}
mod_df <- dmu(seq(20,70,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
plot(seq(20,70,length = 1000),mod_df,type='l')
abline(h=actual)
plot(x,dmu(x,x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs))
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# prior_fun: a function from R^m to R that serves as the mean of f.
# dprior_fun: a function with the gradient of prior_fun. If prior_fun is not NULL
#             one has to send dprior_fun.
# ...: all parameters needed for prior_fun and dprior_fun.
# Output:
# A matrix of dimensions N x m
dmu <- function(x,X,y,sigma = 1, l = 1, sn = 0, sf = 1, std = NULL, prior_fun = NULL,dprior_fun = NULL, ...){
n <- length(y)
if(is.null(dim(X))){
m <- 1
N <- length(x)
}else{
m <- ncol(X)
N <- nrow(X)
}
if(is.null(prior_fun)){
prior_fun <- function(p){return(mean(y))}
dprior_fun <- function(p){return(rep(0,m))}
}
if(is.null(dim(X))){
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j],...))})
}else{
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j,],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j,],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j,],...))})
}
id <- diag(n)
res <- matrix(rep(0,N * m),nrow = N)
A <- solve(matrix_k(X,X,l,sn,sf,std) + sigma^2 * id, matrix(y,ncol = 1) - matrix(prior_y,ncol = 1))
x <- matrix(x, ncol = m)
browser()
for(j in 1:N){
res[j,] <- as.numeric(matrix(dprior_x[[j]],ncol = 1) +
dmatK(x[j,],X,l,sn,sf,std) %*% A)
}
return(res)
}
mod_df <- dmu(seq(20,70,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
A
matrix(y,ncol = 1)
matrix(prior_y,ncol = 1)
A
x
m
N
n+1
j
j <- 1
dprior_x[[j]]
dpior_x
dprior_x
dprior_x[[j]]
matrix(dprior_x[[j]],ncol = 1)
dmatK(x[j,],X,l,sn,sf,std) %*% A
dmatK(x[j,],X,l,sn,sf,std)
dmatK(x[j,],X,l,sn,sf,std)
x[j,]
j
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# prior_fun: a function from R^m to R that serves as the mean of f.
# dprior_fun: a function with the gradient of prior_fun. If prior_fun is not NULL
#             one has to send dprior_fun.
# ...: all parameters needed for prior_fun and dprior_fun.
# Output:
# A matrix of dimensions N x m
dmu <- function(x,X,y,sigma = 1, l = 1, sn = 0, sf = 1, std = NULL, prior_fun = NULL,dprior_fun = NULL, ...){
n <- length(y)
if(is.null(dim(X))){
m <- 1
N <- length(x)
}else{
m <- ncol(X)
N <- nrow(X)
}
if(is.null(prior_fun)){
prior_fun <- function(p){return(mean(y))}
dprior_fun <- function(p){return(rep(0,m))}
}
if(is.null(dim(X))){
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j],...))})
}else{
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j,],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j,],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j,],...))})
}
id <- diag(n)
res <- matrix(rep(0,N * m),nrow = N)
A <- solve(matrix_k(X,X,l,sn,sf,std) + sigma^2 * id, matrix(y,ncol = 1) - matrix(prior_y,ncol = 1))
x <- matrix(x, ncol = m)
browser()
for(j in 1:N){
res[j,] <- as.numeric(matrix(dprior_x[[j]],ncol = 1) +
dmatK(x[j,],X,l,sn,sf,std) %*% A)
}
return(res)
}
mod_df <- dmu(seq(20,70,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
j <- 1
matrix(dprior_x[[j]],ncol = 1)
dmatK(x[j,],X,l,sn,sf,std)
dmatK(x[j,],X,l,sn,sf,std) %*% A
x[j,]
X
dmatK(df$adstocks[1],df$adstocks,l=1,sn=0,sf=sd(df$y),std=NULL)
dmatK(df$adstocks[1],df$adstocks,l=1,sn=0,sf=sd(df$y),std=std_params(df$adstocks))
mod_df <- dmu(df$adstocks,df$adstocks,df$y,sigma = sd(df$y), l = 1, sf = sd(df$y),sn = 0,
std = std_params(df$adstocks))
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# prior_fun: a function from R^m to R that serves as the mean of f.
# dprior_fun: a function with the gradient of prior_fun. If prior_fun is not NULL
#             one has to send dprior_fun.
# ...: all parameters needed for prior_fun and dprior_fun.
# Output:
# A matrix of dimensions N x m
dmu <- function(x,X,y,sigma = 1, l = 1, sn = 0, sf = 1, std = NULL, prior_fun = NULL,dprior_fun = NULL, ...){
n <- length(y)
if(is.null(dim(X))){
m <- 1
N <- length(x)
}else{
m <- ncol(X)
N <- nrow(X)
}
if(is.null(prior_fun)){
prior_fun <- function(p){return(mean(y))}
dprior_fun <- function(p){return(rep(0,m))}
}
if(is.null(dim(X))){
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j],...))})
}else{
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j,],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j,],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j,],...))})
}
id <- diag(n)
res <- matrix(rep(0,N * m),nrow = N)
A <- solve(matrix_k(X,X,l,sn,sf,std) + sigma^2 * id, matrix(y,ncol = 1) - matrix(prior_y,ncol = 1))
x <- matrix(x, ncol = m)
#browser()
for(j in 1:N){
res[j,] <- as.numeric(matrix(dprior_x[[j]],ncol = 1) +
dmatK(x[j,],X,l,sn,sf,std) %*% A)
}
return(res)
}
mod_df <- dmu(df$adstocks,df$adstocks,df$y,sigma = sd(df$y), l = 1, sf = sd(df$y),sn = 0,
std = std_params(df$adstocks))
plot(df$Date,mod_df,type='l')
plot(df$Date,mod_df,type='l')
# The derivative of the matrix K
# Inputs:
# x: a vector of length m.
# X: a vector of length n or a matrix of dimensions n x m.
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# Outputs:
# A matrix of dimensions p x n.
dmatK <- function(x,X,l = 1, sn = 0, sf = 1, std = NULL){
m <- length(x)
if(is.null(dim(X))){
n <- length(X)
}else{
n <- nrow(X)
}
res <- diag(0,nrow = m, ncol = n)
X <- matrix(X,ncol = m)
for(j in 1:n){
res[,j] <- dk(x,X[j,],l,sn,sf,std)
}
res <- diag(1/std$sd) %*% res
return(res)
}
dmatK(df$adstocks[1],df$adstocks,l=1,sn=0,sf=sd(df$y),std=std_params(df$adstocks))
# The derivative of the matrix K
# Inputs:
# x: a vector of length m.
# X: a vector of length n or a matrix of dimensions n x m.
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# Outputs:
# A matrix of dimensions p x n.
dmatK <- function(x,X,l = 1, sn = 0, sf = 1, std = NULL){
m <- length(x)
if(is.null(dim(X))){
n <- length(X)
}else{
n <- nrow(X)
}
res <- diag(0,nrow = m, ncol = n)
X <- matrix(X,ncol = m)
for(j in 1:n){
res[,j] <- dk(x,X[j,],l,sn,sf,std)
}
browser()
res <- diag(1/std$sd) %*% res
return(res)
}
dmatK(df$adstocks[1],df$adstocks,l=1,sn=0,sf=sd(df$y),std=std_params(df$adstocks))
dim(res)
diag(1/std$sd)
std
std$sd
1/std$sd
diag(1/std$sd)
diag(1)
diag(2)
diag(1:2)
diag(0.3)
diag(as.vector(0.3))
# The derivative of the matrix K
# Inputs:
# x: a vector of length m.
# X: a vector of length n or a matrix of dimensions n x m.
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# Outputs:
# A matrix of dimensions p x n.
dmatK <- function(x,X,l = 1, sn = 0, sf = 1, std = NULL){
m <- length(x)
if(is.null(dim(X))){
n <- length(X)
}else{
n <- nrow(X)
}
res <- diag(0,nrow = m, ncol = n)
X <- matrix(X,ncol = m)
for(j in 1:n){
res[,j] <- dk(x,X[j,],l,sn,sf,std)/std$sd
}
return(res)
}
dmatK(df$adstocks[1],df$adstocks,l=1,sn=0,sf=sd(df$y),std=std_params(df$adstocks))
mod_df <- dmu(seq(20,70,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
plot(seq(20,70,length = 1000),mod_df,type='l')
abline(h=actual)
mod_df <- dmu(df$adstocks,df$adstocks,df$y,sigma = sd(df$y), l = 1, sf = sd(df$y),sn = 0,
std = std_params(df$adstocks))
plot(df$Date,mod_df,type='l')
# The derivative of the matrix K
# Inputs:
# x: a vector of length m.
# X: a vector of length n or a matrix of dimensions n x m.
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# Outputs:
# A matrix of dimensions p x n.
dmatK <- function(x,X,l = 1, sn = 0, sf = 1, std = NULL){
m <- length(x)
if(is.null(dim(X))){
n <- length(X)
}else{
n <- nrow(X)
}
den <- 1
if(!is.null(std)){
den <- 1/std$sd
}
res <- diag(0,nrow = m, ncol = n)
X <- matrix(X,ncol = m)
for(j in 1:n){
res[,j] <- den * dk(x,X[j,],l,sn,sf,std)
}
return(res)
}
dmatK(df$adstocks[1],df$adstocks,l=1,sn=0,sf=sd(df$y),std=std_params(df$adstocks))
dmatK(df$adstocks[1],df$adstocks,l=1,sn=0,sf=sd(df$y))
lapply(0:100,function(x){return(dk(50,x,std = xs))}) %>% unlist() %>% plot(.,type='l')
lapply(0:100,function(x){return(cov_ker(50,x,std = xs))}) %>% unlist() %>% plot(.,type='l')
# Derivative of Covariance kernel
# Inputs:
# x a vector of length p
# y a vector of length p
# l a positive number.
# sf a positive number.
# sn a non-negative number.
# std a list with elements mean: a vector of length p, and sd: a positive vector of length p.
# Outputs:
# A vector of length p.
dk <- function(x,y,l=1,sn=0,sf=1,std = NULL){
den <- 1
if(!is.null(std)){
den <- 1/std$sd^2
}
kp <- -2*sf/l^2*(x-y)*cov_ker(x,y,l,sn,sf,std)
return(den * kp)
}
lapply(0:100,function(x){return(dk(50,x,std = xs))}) %>% unlist() %>% plot(.,type='l')
# The derivative of the matrix K
# Inputs:
# x: a vector of length m.
# X: a vector of length n or a matrix of dimensions n x m.
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# Outputs:
# A matrix of dimensions p x n.
dmatK <- function(x,X,l = 1, sn = 0, sf = 1, std = NULL){
m <- length(x)
if(is.null(dim(X))){
n <- length(X)
}else{
n <- nrow(X)
}
den <- 1
if(!is.null(std)){
den <- 1/std$sd
}
res <- diag(0,nrow = m, ncol = n)
X <- matrix(X,ncol = m)
for(j in 1:n){
res[,j] <- den * dk(x,X[j,],l,sn,sf,std)
}
return(res)
}
dmatK(df$adstocks[1],df$adstocks,l=1,sn=0,sf=sd(df$y),std=std_params(df$adstocks))
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# prior_fun: a function from R^m to R that serves as the mean of f.
# dprior_fun: a function with the gradient of prior_fun. If prior_fun is not NULL
#             one has to send dprior_fun.
# ...: all parameters needed for prior_fun and dprior_fun.
# Output:
# A matrix of dimensions N x m
dmu <- function(x,X,y,sigma = 1, l = 1, sn = 0, sf = 1, std = NULL, prior_fun = NULL,dprior_fun = NULL, ...){
n <- length(y)
if(is.null(dim(X))){
m <- 1
N <- length(x)
}else{
m <- ncol(X)
N <- nrow(X)
}
if(is.null(prior_fun)){
prior_fun <- function(p){return(mean(y))}
dprior_fun <- function(p){return(rep(0,m))}
}
if(is.null(dim(X))){
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j],...))})
}else{
prior_x <- 1:N %>% lapply(function(j){return(prior_fun(x[j,],...))}) %>% unlist()
prior_y <- 1:n %>% lapply(function(j){return(prior_fun(X[j,],...))}) %>% unlist()
dprior_x <- 1:N %>% lapply(function(j){return(dprior_fun(x[j,],...))})
}
id <- diag(n)
res <- matrix(rep(0,N * m),nrow = N)
A <- solve(matrix_k(X,X,l,sn,sf,std) + sigma^2 * id, matrix(y,ncol = 1) - matrix(prior_y,ncol = 1))
x <- matrix(x, ncol = m)
#browser()
for(j in 1:N){
res[j,] <- as.numeric(matrix(dprior_x[[j]],ncol = 1) +
dmatK(x[j,],X,l,sn,sf,std) %*% A)
}
return(res)
}
mod_df <- dmu(seq(20,70,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
plot(seq(20,70,length = 1000),mod_df,type='l')
abline(h=actual)
plot(x,dmu(x,x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs))
mod_df <- dmu(seq(20,70,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
plot(seq(20,70,length = 1000),mod_df,type='l')
abline(h=actual)
plot(x,dmu(x,x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs))
mod_df <- dmu(df$adstocks,df$adstocks,df$y,sigma = sd(df$y), l = 1, sf = sd(df$y),sn = 0,
std = std_params(df$adstocks))
plot(df$Date,mod_df,type='l')
# The derivative of the matrix K
# Inputs:
# x: a vector of length m.
# X: a vector of length n or a matrix of dimensions n x m.
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# Outputs:
# A matrix of dimensions p x n.
dmatK <- function(x,X,l = 1, sn = 0, sf = 1, std = NULL){
m <- length(x)
if(is.null(dim(X))){
n <- length(X)
}else{
n <- nrow(X)
}
den <- 1
if(!is.null(std)){
den <- 1/std$sd^2
}
res <- diag(0,nrow = m, ncol = n)
X <- matrix(X,ncol = m)
for(j in 1:n){
res[,j] <- den * dk(x,X[j,],l,sn,sf,std)
}
return(res)
}
dmatK(df$adstocks[1],df$adstocks,l=1,sn=0,sf=sd(df$y),std=std_params(df$adstocks))
mod_df <- dmu(seq(20,70,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
plot(seq(20,70,length = 1000),mod_df,type='l')
abline(h=actual)
plot(seq(20,70,length = 1000),mod_df,type='l',ylim = (-3,6))
plot(seq(20,70,length = 1000),mod_df,type='l',ylim = c(-3,6))
abline(h=actual)
plot(seq(0,100,length.out = 1000),
as.vector(matrix_k(0,seq(0,100,length.out = 1000),l = 4, sf = 1,sn = 0,std = xs)),
type='l')
plot(seq(20,70,length.out = 1000),
sqrt(nu(seq(20,70,length = 1000),x,sigma = 5, l = 1, sf = sd(y),sn = 0,std = xs)),
type='l')
lines(seq(0,100,length.out = 1000),
sqrt(nu(seq(0,100,length = 1000),x,sigma = 1, l = 1, sf = sd(y),sn = 0,std = xs)))
lines(seq(0,100,length.out = 1000),
sqrt(nu(seq(0,100,length = 1000),x,sigma = 5, l = 1, sf = 1,sn = 0,std = xs)))
plot(y,pred)
abline(a = 0, b = 1)
mod_f <- mu(seq(0,100,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
mod_v <- nu(seq(0,100,length = 1000),x,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
plot(x,y)
lines(seq(0,100,length = 1000),mod_f,col='red')
lines(seq(0,100,length = 1000),mod_f + 1.96 * sqrt(mod_v),col='red', lty = 2)
lines(seq(0,100,length = 1000),mod_f - 1.96 * sqrt(mod_v),col='red', lty = 2)
mod_df <- dmu(seq(20,70,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
plot(seq(20,70,length = 1000),mod_df,type='l')
abline(h=actual)
# The derivative of the matrix K
# Inputs:
# x: a vector of length m.
# X: a vector of length n or a matrix of dimensions n x m.
# l: a number.
# sf: a positive number.
# sn: a non-negative number.
# std: a list with elements mean: a vector of length m, and sd: a positive vector of length m.
# Outputs:
# A matrix of dimensions p x n.
dmatK <- function(x,X,l = 1, sn = 0, sf = 1, std = NULL){
m <- length(x)
if(is.null(dim(X))){
n <- length(X)
}else{
n <- nrow(X)
}
den <- 1
if(!is.null(std)){
den <- 1/std$sd
}
res <- diag(0,nrow = m, ncol = n)
X <- matrix(X,ncol = m)
for(j in 1:n){
res[,j] <- den * dk(x,X[j,],l,sn,sf,std)
}
return(res)
}
mod_df <- dmu(seq(20,70,length = 1000),x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs)
plot(seq(20,70,length = 1000),mod_df,type='l')
abline(h=actual)
plot(x,dmu(x,x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs))
plot(seq(20,70,length = 1000),mod_df,type='l')
abline(h=actual)
points(x,dmu(x,x,y,sigma = sd(y), l = 1, sf = sd(y),sn = 0,std = xs))
